name: CI

on:
  pull_request:
    branches: [ master ]

  push:

jobs:
  build-linux-nix:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Install Nix
      uses: cachix/install-nix-action@v12

    - uses: cachix/cachix-action@v10
      with:
        name: futhark
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

    - name: Build Futhark
      run: nix-build --argstr suffix nightly-linux-x86_64 --argstr commit $GITHUB_SHA

    - uses: actions/upload-artifact@v1
      with:
        name: futhark-nightly-linux-x86_64.tar.xz
        path: result/futhark-nightly-linux-x86_64.tar.xz

  build-linux-cabal:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo add-apt-repository ppa:hvr/ghc
        sudo apt-get update
        sudo apt-get install ghc-9.0.1
        echo "/opt/ghc/bin" >> $GITHUB_PATH

    - uses: actions/cache@v2
      name: Cache ~/.cabal/packages, ~/.cabal/store and dist-newstyle
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-cabal

    - name: Build Futhark
      run: |
        cabal --version
        ghc --version
        cabal update
        cabal install -w ghc-9.0.1 --install-method=copy --overwrite-policy=always

  build-linux-stack:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y haskell-stack

    - uses: actions/cache@v2
      name: Cache ~/.stack and .stack-work
      with:
        path: |
          ~/.stack
          .stack-work
        key: ${{ runner.os }}-stack

    - name: Build Futhark
      run: |
        stack setup
        stack install

  build-mac-cabal:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        brew install cabal-install ghc sphinx-doc
        echo "/usr/local/opt/sphinx-doc/bin" >> $GITHUB_PATH

    - uses: actions/cache@v2
      name: Cache ~/.cabal/packages, ~/.cabal/store and dist-newstyle
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-cabal

    - name: Build
      run: |
        cp -r tools/release/skeleton futhark-nightly-macos-x86_64

        mkdir -p futhark-nightly-macos-x86_64/bin
        cabal v2-update
        cabal install --install-method=copy --overwrite-policy=always --installdir=futhark-nightly-macos-x86_64/bin
        mkdir -p futhark-nightly-macos-x86_64/share/man/man1/
        (cd docs; make man)
        cp -r docs/_build/man/* futhark-nightly-macos-x86_64/share/man/man1/

        mkdir -p futhark-nightly-macos-x86_64/share/futhark
        cp LICENSE futhark-nightly-macos-x86_64/share/futhark/
        echo "${GITHUB_SHA}" > futhark-nightly-macos-x86_64/commit-id
        tar -Jcf futhark-nightly-macos-x86_64.tar.xz futhark-nightly-macos-x86_64

    - uses: actions/upload-artifact@v1
      with:
        name: futhark-nightly-macos-x86_64.tar.xz
        path: futhark-nightly-macos-x86_64.tar.xz

  build-windows:
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        choco install -y msys2
        choco install -y ghc --version=8.10.3 --allow-downgrade
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    - uses: actions/cache@v2
      name: Cache ~/.cabal/packages, ~/.cabal/store and dist-newstyle
      with:
        path: |
          ~/AppData/Roaming/cabal/packages
          ~/AppData/Roaming/cabal/store
          dist-newstyle
        key: ${{ runner.os }}-cabal

    - name: Build
      shell: bash
      run: |
        cabal update
        try() { cabal install -j1 --install-method=copy --overwrite-policy=always --installdir=.; }
        try || try || try

    - uses: papeloto/action-zip@v1
      with:
        files: futhark.exe
        dest: futhark-nightly-windows-x86_64.zip

    - uses: actions/upload-artifact@v1
      with:
        name: futhark-nightly-windows-x86_64.zip
        path: futhark-nightly-windows-x86_64.zip

  test-unit-and-style:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Install Nix
      uses: cachix/install-nix-action@v12

    - uses: actions/cache@v2
      name: Cache ~/.cabal/packages, ~/.cabal/store and dist-newstyle
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-${{ hashFiles('nix/sources.json') }}-style

    - name: Style check
      run: nix-shell --pure --run "tools/style-check.sh src unittests"

    - name: Unit tests
      run: |
          nix-shell --pure --run "cabal update"
          nix-shell --pure --run "cabal test"

  build-docs:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Install Nix
      uses: cachix/install-nix-action@v12

    - uses: actions/cache@v2
      name: Cache ~/.cabal/packages, ~/.cabal/store and dist-newstyle
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-${{ hashFiles('nix/sources.json') }}-haddock

    - name: Run haddock
      run: |
          nix-shell --pure --run "cabal update"
          nix-shell --pure --run "cabal haddock"

  test-interpreter:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - run: |
        futhark test -i tests

  test-c:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-jsonschema

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - run: |
        export CFLAGS="-fsanitize=undefined -fsanitize=address -fno-sanitize-recover -O"
        futhark test -c --backend=c tests --no-tuning
        make -C tests_lib/c -j

  test-multicore:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-jsonschema

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - run: |
        export CFLAGS="-fsanitize=undefined -fsanitize=address -fno-sanitize-recover -O"
        futhark test -c --backend=multicore tests --no-tuning
        make -C tests_lib/c FUTHARK_BACKEND=multicore

  test-python:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python-numpy python3-numpy

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - run: |
        futhark test -c --no-terminal --no-tuning --backend=python --exclude=no_python --exclude=compiled tests
        make -C tests_lib/python -j

  test-opencl:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y opencl-headers nvidia-cuda-dev nvidia-opencl-dev oclgrind python3-jsonschema

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - run: |
        futhark test -c --no-terminal --backend=opencl --exclude=compiled --runner=tools/oclgrindrunner.sh tests

  test-pyopencl:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y opencl-headers nvidia-cuda-dev nvidia-opencl-dev oclgrind
        sudo apt-get install -y python3-numpy python3-pyopencl

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - run: |
        futhark test -c --no-terminal --backend=pyopencl --exclude=compiled --runner=tools/oclgrindrunner.sh tests

  test-cuda:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - name: Install OS dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y nvidia-cuda-dev

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - run: |
        futhark test -C --no-terminal --backend=cuda tests

  test-wasm:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - uses: mymindstorm/setup-emsdk@v7
      with:
        version: 2.0.18
        actions-cache-folder: 'emsdk-cache'

    - uses: actions/setup-node@v1
      with:
        node-version: '16.x'

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Run tests
      run: |
        node --version
        export EMCFLAGS="-sINITIAL_MEMORY=2147418112 -O1" # 2gb - 64kb... largest value of memory
        futhark test -c --backend=wasm --runner=./tools/node-simd.sh --no-tuning --exclude=no_wasm tests

  test-wasm-multicore:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - uses: mymindstorm/setup-emsdk@v7
      with:
        version: 2.0.18
        actions-cache-folder: 'emsdk-cache'

    - uses: actions/setup-node@v1
      with:
        node-version: '16.x'

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Run tests
      run: |
        node --version
        export EMCFLAGS="-sINITIAL_MEMORY=2147418112 -O1 -s PTHREAD_POOL_SIZE=12" # 2gb - 64kb... largest value of memory
        futhark test -c --backend=wasm-multicore --runner=./tools/node-threaded.sh --no-tuning --exclude=no_wasm tests

  test-wasm-lib:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - uses: mymindstorm/setup-emsdk@v7
      with:
        version: 2.0.18
        actions-cache-folder: 'emsdk-cache'

    - uses: actions/setup-node@v1
      with:
        node-version: '16.x'

    - name: Install Jest
      run: |
        npm install jest --global

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Run tests
      run: |
        make -C tests_lib/javascript
        make -C tests_lib/web

  test-tools:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - run: |
        tools/testparser.sh tests

    - run: |
        cd tests_pkg && sh test.sh

    - run: |
        cd tests_literate && sh test.sh

    - run: |
        cd tests_repl && sh test.sh

    - run: |
        cd tests_bench && sh test.sh

    - run: |
        cd tests_adhoc && sh test.sh

    - run: |
        futhark doc -o prelude-docs prelude
        tar -Jcf prelude-docs.tar.xz prelude-docs

    - uses: actions/upload-artifact@v1
      with:
        name: prelude-docs.tar.xz
        path: prelude-docs.tar.xz

  benchmark-opencl:
    runs-on: ubuntu-20.04
    needs: [build-linux-nix]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive # for git-annex to work.
        fetch-depth: 0        #

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y opencl-headers nvidia-cuda-dev nvidia-opencl-dev git-annex

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - name: Install from nightly tarball
      run: |
        tar xvf futhark-nightly-linux-x86_64.tar.xz
        make -C futhark-nightly-linux-x86_64/ install PREFIX=$HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - run: |
        cd futhark-benchmarks && pwd && git-annex get

    - run: |
        futhark test -C --no-terminal --backend=opencl  --pass-compiler-option=--Werror futhark-benchmarks

  deploy-nightly:
    runs-on: ubuntu-20.04
    needs: [build-windows, build-linux-nix, build-mac-cabal, test-tools]
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSHKEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-windows-x86_64.zip


    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-macos-x86_64.tar.xz

    - uses: actions/download-artifact@v2
      with:
        name: futhark-nightly-linux-x86_64.tar.xz

    - uses: actions/download-artifact@v2
      with:
        name: prelude-docs.tar.xz

    - name: scp tarballs to server
      run: scp -o StrictHostKeyChecking=no futhark-nightly-windows-x86_64.zip futhark-nightly-linux-x86_64.tar.xz futhark-nightly-macos-x86_64.tar.xz futhark@futhark-lang.org:/var/www/htdocs/futhark-lang.org/releases

    - name: copy docs to server
      run: |
        tar -xf prelude-docs.tar.xz
        rsync -rv -e 'ssh -o "StrictHostKeyChecking no"' prelude-docs/* futhark@futhark-lang.org:/var/www/htdocs/futhark-lang.org/docs/prelude/
